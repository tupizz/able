###
# Create post
POST http://127.0.0.1:5005/api/posts
Content-Type: application/json
Accept: application/json

{
  "content": "# Heading\n\n```json\n{\n  \"content\": \"# Heading\\n\\n```json\\n```\",\n  \"title\": \"Great post example\",\n  \"category\": \"mobile\"\n}\n```\n## todo\n- todo1\n- todo2",
  "title": "New post",
  "category": "network"
}

###
# Update post
PUT http://127.0.0.1:5005/api/posts/61e8d5ed8e0aab4db76fc0ad
Content-Type: application/json
Accept: application/json

{
  "content": "![](https://miro.medium.com/max/930/0*MNVJq_8e0SJoqZb5.jpg)\n\nWe want to create a blog from scratch using a MERN stack. This application has two sides: the public home view and the editor backend view (or admin view).\n\n**Must have**\n\n* The post editor should accept Markdown. You can use either your own solution or an existing package.\n* Each post should have a category. The category list can be hardcoded in the application.\n* The blog's home should list the posts ordered by creation time. In the post editor, you can change the creation time anytime.\n* Each post listed in the blog's home should have a link to the post in a single view. The route for a post should be `/{category-name}/{post-title-in-this-format}`.\n* The blog's admin view should list the posts ordered by creation time and should list: title, category and creation time. It also should have a link per post to edit the post in the post editor.\n\n**Nice to have**\n\n* Deleting posts from the admin view.\n\n**Won't have**\n\n* This blog engine doesn't need an authentication system.\n\nThe app will be connected to a MongoDB instance, which has the same connection information:\n\n```\nHost: mongodb:27017\n\n```bash\ndocker run -d --name mongo-db \\\n    -p 27017:27017 \\\n    mongo:latest\n```\n\n**Additional notes**\n\n* There is some boilerplate code in the application, but some components are missing. It's part of this exercise to add and connect those missing pieces.\n* You'll probably prefer to solve this exercise on your local machine.\n* We use MongoDB in this exercise. This exercise uses [mongoose](https://mongoosejs.com/) as ORM.",
  "title": "New post updated",
  "category": "network"
}

###
# Get all posts
# @name get_posts
GET http://127.0.0.1:5005/api/posts
Accept: application/json

###
# Get one posts
# @name get_posts
GET http://127.0.0.1:5005/api/posts/61e8d5ed8e0aab4db76fc0ad
Accept: application/json

###
# Get specific post
# @name get_posts
GET http://127.0.0.1:5005/api/posts?slug=mobile%2Ftest-bla-bla-2-2-2002
Accept: application/json


###
# Get specific post
# @name get_posts
DELETE http://127.0.0.1:5005/api/posts/61e8cb545e3e7833b125a0dd
Accept: application/json
